---------------------------- Access Managed Sales Reconciliation Report ----------------------
----------------------------------- Created By Jimmy -----------------------------------------
----------------------------- Last Updated By : Jimmy : 2025-04-23 > Updated Service Provider Field
----------------------------- Last Updated By : Jimmy : 2025-05-26 > Updated Service Provider Field to pull data via Driver data
----------------------------- Last Updated By : Jimmy : 2025-05-28 > Added GMV VAT Exl. field
----------------------------- Last Updated By : Jimmy : 2025-07-03 > Added Delivery Note Ordered Qty, Reduced Amount and Reduced Qty
----------------------------- Last Updated By : Jimmy : 2025-07-14 > Updated Weight per UoM to also convert ML to L
----------------------------- Last Updated By : Jimmy : 2025-07-22 > Added DN Delivery Date 
----------------------------- Last updated By : Cleophas : 2025-08-13 > Added a reconciliation flag
with
--------------------------- ERP Dashboard Access --------------------------------------------
erp_employee_users as (
                      select 
                      edam.user_id,
                      territory_list
                      from `kyosk-prod.karuru_views.erp_dashboard_access_mapping` edam, 
                      unnest(new_territory_list) territory_list
                      ),
------------------------------- Uploaded Tables -------------------------------------------
regional_mapping as (
                    select distinct country,
                    region,
                    sub_region,
                    division,
                    original_territory_id, 
                    new_territory_id,
                    from `kyosk-prod.karuru_upload_tables.territory_region_mapping` 
                    ),
------------------------------ Product Bundle Data --------------------------------------
product_bundle_with_index as (
                              select *,
                              row_number()over(partition by id order by modified desc) as index
                              from `kyosk-prod.karuru_reports.product_bundle` 
                              where date(creation) >= '2018-01-01' 
                              --and disabled = false
                              ),
product_bundle_data_cte as (
                            select distinct pb.non_stock_item_id,
                            pb.uom,
                            si.stock_item_id,
                            si.stock_uom,
                            si.conversion_factor
                            from product_bundle_with_index pb,unnest(stock_items) si
                            where index = 1
                            ),
---------------------------------- item ------------------------------
item as (
        SELECT * 
        FROM `kyosk-prod.karuru_reports.item` 
        WHERE date(creation) > '2022-02-01'
        --and company_id = 'KYOSK DIGITAL SERVICES LTD (KE)'
        and maintain_stock = true
        ),
item_cte as (
              select distinct 
              i.company_id,
              i.id,
              i.item_code,
              i.item_name,
              --i.item_group_id,
              --i.maintain_stock,
              --i.disabled,
              i.stock_uom,
              case
                when i.weight_uom = 'Gram' then 'Kg' 
              else i.weight_uom end as weight_uom,
              case
                when (i.weight_uom = 'Gram') then (i.weight_per_unit / 1000)
                when (i.weight_uom = 'ML') then (i.weight_per_unit / 1000)
                when (i.weight_uom = 'Millilitre') then (i.weight_per_unit / 1000)
              else i.weight_per_unit end as weight_per_unit,
              --i.width,
              --i.height,
              --i.length,
              t.item_tax_template_id,
              --CAST(REGEXP_EXTRACT(t.item_tax_template_id, r'\((\d+)%\)') AS INT64) / 100 AS extracted_tax_value,
              case when t.item_tax_template_id = 'Uganda Tax - KDUG' then 0.18 
                   when t.item_tax_template_id = 'Kenya Tax - KDKE' then 0.16
              else coalesce(CAST(REGEXP_EXTRACT(t.item_tax_template_id, r'\((\d+(?:\.\d+)?)%\)') AS FLOAT64) / 100,0) end as extracted_tax_value,
              from item i, unnest(taxes) as t
              ),
----------------------------- Service Providers ----------------------
service_provider as (
                      SELECT *,
                      row_number()over(partition by id order by updated_at desc) as index
                      FROM `kyosk-prod.karuru_reports.service_provider` 
                      WHERE date(created_at) > "2021-01-01"
                      ),
service_provider_cte as (
                          select distinct 
                          id,
                          name,
                          from service_provider
                          where index = 1
                          ),
------------------------- Driver Data ----------------------------
driver_with_index as (
                    SELECT * ,
                    row_number()over(partition by id order by updated_at desc) as index
                    FROM `kyosk-prod.karuru_reports.driver` 
                    WHERE (created_at) >= '2023-01-01'
                    --and id = '0E4QK70RCCGHE'
                    ),
driver_data_cte as (
                    select distinct dwi.id,
                    dwi.name,
                    dwi.service_provider_id,
                    spc.name as service_provider_name
                    from driver_with_index dwi
                    left join service_provider_cte spc on dwi.service_provider_id = spc.id
                    where index = 1
                    ),
-------------------------------------- Vehicle ----------------
vehicle as (
            SELECT *,
            row_number()over(partition by id order by updated_at desc) as index
            FROM `kyosk-prod.karuru_reports.vehicle` 
            WHERE date(created_at) >= '2023-10-01'
            ),
vehicle_cte as (
              select distinct 
              id,
              license_plate,
              --case when driver_id = '' then null else driver_id end as driver_id,
              case when service_provider_id = '' then null else service_provider_id end as service_provider_id,
              case when type = '' then null else type end as type,
              --case when volume = '' then null else volume end as volume,
              case when load_capacity = '' then null else load_capacity end as load_capacity,
              from vehicle
              where index = 1
              ),
---------------------------- Fulfilment Centers --------------------
fulfillment_center as (
                        SELECT *,
                        row_number()over(partition by id order by updated_at desc) as index 
                        FROM `kyosk-prod.karuru_reports.fulfillment_center` 
                        WHERE date(created_at) > "2021-06-27" #start date
                        ),
fulfillment_center_cte as (
                            select distinct 
                            id,
                            name,
                            --country_code,
                            from fulfillment_center
                            where index =1 
                            ),
--------------------------------------- Delivery Trips -----------------------------------------
delivery_trips as (
                  select *,
                  row_number()over(partition by id order by updated_at desc) as index
                  FROM `kyosk-prod.karuru_reports.delivery_trips` 
                  where territory_id not in ('Test UG Territory', 'Test NG Territory', 'Kyosk TZ HQ', 'Test TZ Territory', 'Kyosk HQ','DKasarani', 'Test KE Territory', 'Test Fresh TZ Territory')
                  and status not in ('CANCELLED')
                  and date(created_at) >= date_sub(date_trunc(current_date() , month), interval 3 month)
  				  --and date(created_at) between '2025-03-01' and '2025-04-30'
                  --and date(created_at) >= '2024-02-01'
                  --and country_code = 'KE'
                  --and id = '0HH2844KZ38YX'
                  ),
delivery_trips_cte as (
                        select date(dt.created_at) as creation_date,
                        country_code,
                        territory_id,
                        --timestamp_diff(current_timestamp(), status_change_history.change_time)
                        timestamp_diff(current_timestamp(), sh.change_time, hour) as time_since_dispatched,
                        id,
                        code,
                        status,
                        vehicle_id,
                        vehicle_v2.id as vehicle_v2_id,
                        vehicle_v2.license_plate as vehicle_v2_license_plate,
                        case when vehicle_v2.load_capacity = '' then null else vehicle_v2.load_capacity end as vehicle_v2_load_capacity,
                        case when vehicle_v2.type = '' then null else vehicle_v2.type end as vehicle_v2_type,
                        vehicle_provider_id,
                        vehicle_v2.service_provider_id as vehicle_v2_service_provider_id,
                        driver_id,
                        driver.code as driver_code,
                        driver.name as driver_name,
                        delivery_note_ids as delivery_note_id
                        from delivery_trips dt
                        left join unnest(delivery_note_ids) delivery_note_ids with offset pos
                        left join unnest(status_change_history) sh with offset pos2 on pos = pos2
                        qualify row_number()over(partition by dt.id order by sh.change_time desc) = 1
                        ),
/*delivery_trip_timestamp_cte as (
                        select date(dt.created_at) as creation_date,
                        country_code,
                        territory_id,
                        timestamp_diff(current_timestamp(), sh.change_time, hour) as time_since_dispatched,
                        id,
                        code,
                        status,
                        vehicle_id,
                        vehicle_v2.id as vehicle_v2_id,
                        vehicle_v2.license_plate as vehicle_v2_license_plate,
                        case when vehicle_v2.load_capacity = '' then null else vehicle_v2.load_capacity end as vehicle_v2_load_capacity,
                        case when vehicle_v2.type = '' then null else vehicle_v2.type end as vehicle_v2_type,
                        vehicle_provider_id,
                        vehicle_v2.service_provider_id as vehicle_v2_service_provider_id,
                        driver_id,
                        driver.code as driver_code,
                        driver.name as driver_name,
                        delivery_note_ids as delivery_note_id
                        from delivery_trips dt, unnest(status_change_history) sh
),*/
/*---------------------------- Sales Invoice Data ------------------------------
sales_invoice_with_index as ( 
                              select *,
                              row_number()over(partition by name order by modified desc) as index
                              from `kyosk-prod.karuru_reports.sales_invoice` 
                              where date(created) >= date_sub(date_trunc(current_date(), month), interval 3 month)
  							  --where date(created) between '2025-03-01' and '2025-04-30'
                              and is_karuru_applied = true
                              and territory_id not in ('Test UG Territory', 'Test NG Territory', 'Kyosk TZ HQ', 'Test TZ Territory', 'Kyosk HQ','DKasarani', 'Test KE Territory','Test Fresh TZ Territory')
                              ),
si_with_items_cte as (
                      select distinct date(si.created) as creation_date,
                      si.territory_id,
                      si.name,
                      si.kyosk_delivery_note,

                      sii.item_code,
                      sii.base_amount,
                      sii.base_net_amount,
                      --sum(sii.base_amount) as base_amount,
                      --sum(sii.base_net_amount) as base_net_amount,
                      from sales_invoice_with_index si,unnest(items) sii 
                      where index = 1
                      --group by 1,2,3,4,5
                      ),*/
--------------------------- Delivery Notes ---------------------------------
delivery_notes as (
                select *,
                row_number()over(partition by id order by updated_at desc ) as index
                from `karuru_reports.delivery_notes`
                where date(created_at) >= date_sub(date_trunc(current_date() , month), interval 3 month)
                --where date(created_at) between '2025-03-01' and '2025-03-31'
                --where date(created_at) >= '2024-02-01'
              ),
delivery_notes_cte as (
                        select distinct --dn.created_at,
                        date(dn.delivery_date) as delivery_date,
                        dn.route_id,
                        dn.route_name,
                        dn.fullfilment_center_id,
                        dn.delivery_trip_id,
                        dn.id,
                        dn.code,
                        --row_number()over(partition by dn.delivery_trip_id order by dn.created_at asc) as delivery_note_created_at_index,
                        dn.payment_type,
                        dn.outlet_id,
                        dn.status ,
                        dn.so_created_on_app,
                        dn.agent_name as market_developer_name,
                        dn.outlet.name as outlet_name,
                        dn.outlet.phone_number as outlet_phone_number
                        from delivery_notes dn
                        where index = 1
                        ),
delivery_notes_items as (
                        select distinct dn.delivery_trip_id,
                        
                        dn.id,
                        dn.code,
                        row_number()over(partition by dn.id order by oi.product_bundle_id asc) as delivery_note_item_index,
                        oi.item_group_id,
                        oi.product_bundle_id,
                        oi.status as item_status,
                        coalesce(nullif(oi.uom,""),pbd.uom) as uom,
                        oi.catalog_item_qty * oi.discount_amount as delivery_note_discount_amount,
                        oi.total_delivered - (oi.qty_delivered * oi.discount_amount) as total_delivered,
                        oi.inventory_items,
                        oi.total_orderd - (oi.catalog_item_qty * oi.discount_amount) as delivery_note_ordered_amount,
                        case
                          when dn.status in ('DELIVERING','DISPATCHED', 'CASH_COLLECTED','DELIVERED', 'PAID', 'DRIVER_CANCELLED', 'RESCHEDULED') 
                          and oi.status in ('ITEM_CANCELLED', 'ITEM_FULFILLED', 'ITEM_DISPATCHED', 'ITEM_RESCHEDULED') then oi.total_orderd - (oi.catalog_item_qty * oi.discount_amount)
                        else 0 end as delivery_note_dispatched_amount,
                        /*case
                          when dn.status in ('CASH_COLLECTED','DELIVERED', 'PAID', 'DRIVER_CANCELLED', 'RESCHEDULED') 
                          and oi.status in ('ITEM_FULFILLED', 'ITEM_DISPATCHED', 'ITEM_RESCHEDULED') then (oi.total_orderd - (oi.catalog_item_qty * discount_amount)) - (oi.total_delivered - (oi.qty_delivered * oi.discount_amount)) 
                        else 0 end as delivery_note_removed_amount,*/
                        case when oi.status = 'ITEM_CANCELLED' and oi.cancellation_reason <> '' then oi.total_orderd - (oi.catalog_item_qty * oi.discount_amount)
                              when oi.status = 'ITEM_RESCHEDULED' then oi.total_orderd - (oi.catalog_item_qty * oi.discount_amount)
                        else 0 end as delivery_note_returned_amount,
                        case
                          when dn.status in ('RESCHEDULED')
                          and oi.status in ('ITEM_RESCHEDULED') then oi.total_orderd - (oi.original_item_qty * oi.discount_amount)
                        else 0 end as delivery_note_rescheduled_amount,
                        case when dn.status in ('CASH_COLLECTED','DELIVERED', 'PAID', 'DRIVER_CANCELLED', 'RESCHEDULED') and oi.status in ('ITEM_CANCELLED') then oi.total_orderd - (oi.catalog_item_qty * discount_amount) else 0 end as delivery_note_cancelled_amount,
                        case when oi.status = 'ITEM_REMOVED' then oi.total_orderd - (oi.catalog_item_qty * discount_amount) else 0 end as delivery_note_removed_amount,
                        case when oi.status = 'ITEM_FULFILLED' and oi.original_item_qty > oi.qty_delivered then (oi.total_orderd - (oi.original_item_qty * discount_amount)) - (oi.total_delivered - (oi.qty_delivered * discount_amount)) else 0 end as delivery_note_reduced_amount,
                        case when dn.status in ('CASH_COLLECTED','DELIVERED', 'PAID') and oi.status in ('ITEM_FULFILLED') then oi.net_total_delivered else 0 end as gmv_vat_incl,

                        --swic.base_net_amount as gmv_vat_excl,
                        oi.original_item_qty as delivery_note_ordered_qty,
                        case
                          when dn.status in ('DELIVERING','DISPATCHED', 'CASH_COLLECTED','DELIVERED', 'PAID', 'DRIVER_CANCELLED', 'RESCHEDULED') 
                          and oi.status in ('ITEM_CANCELLED', 'ITEM_FULFILLED', 'ITEM_DISPATCHED', 'ITEM_RESCHEDULED') then oi.catalog_item_qty
                        else 0 end as delivery_note_dispatched_qty,
                        case when oi.status = 'ITEM_FULFILLED' and oi.original_item_qty > oi.qty_delivered then oi.original_item_qty - oi.qty_delivered else 0 end as delivery_note_reduced_qty,
                        case when dn.status in ('CASH_COLLECTED','DELIVERED', 'PAID') and oi.status in ('ITEM_FULFILLED') then oi.qty_delivered else 0 end as delivery_note_delivered_qty
                        from delivery_notes dn ,unnest(order_items) oi
                        left join product_bundle_data_cte pbd on oi.product_bundle_id = pbd.non_stock_item_id
                        --left join si_with_items_cte swic on dn.id = swic.kyosk_delivery_note and oi.product_bundle_id = swic.item_code
                        where index = 1 
                      ),
delivery_notes_inventory_items as (
                                  select distinct dni.delivery_trip_id,
                                  dni.id,
                                  dni.code,
                                  dni.delivery_note_item_index,
                                  dni.item_group_id,
                                  dni.product_bundle_id,
                                  dni.item_status,
                                  dni.uom,
                                  --dni.original_item_qty,
                                  --dni.total_ordered,
                                  --dni.discount_amount,
                                  --dni.qty_delivered,
                                  --dni.total_delivered,
                                  sum(ii.conversion_factor) as conversion_factor,
                                  string_agg(distinct ii.stock_item_id ,"/" order by stock_item_id) as stock_item_id,
                                  string_agg(distinct ii.uom,"/" order by ii.uom) as stock_uom,
                                  sum(ii.inventory_item_qty) as inventory_item_qty,
                                  dni.delivery_note_ordered_amount,
                                  dni.delivery_note_dispatched_amount,
                                  dni.delivery_note_discount_amount,
                                  dni.delivery_note_removed_amount,
                                  dni.delivery_note_reduced_amount,
                                  dni.delivery_note_returned_amount,
                                  dni.delivery_note_rescheduled_amount,
                                  dni.delivery_note_cancelled_amount,
                                  dni.gmv_vat_incl,
                                  --dni.gmv_vat_excl,
                                  dni.delivery_note_ordered_qty,
                                  dni.delivery_note_dispatched_qty,
                                  dni.delivery_note_reduced_qty,
                                  dni.delivery_note_delivered_qty
                                  from delivery_notes_items dni,unnest(inventory_items)ii
                                  group by 1,2,3,4,5,6,7,8,13,14,15,16,17,18,19,20,21,22,23,24,25
                                ),
-------------------- Delivery Note Settlements ----------------------------
delivery_notes_settlement_cte as (
                                    select distinct dn.id,
                                    s.channel as settlement_channel,
                                    transaction_reference,
                                    s.amount as settlement_amount,
                                    from delivery_notes dn, unnest(settlements) s
                                    where index = 1
                                    and s.status not in ('INITIATED')
                                    ),
delivery_notes_settlement_agg as (
                                  select distinct id,
                                  --code,
                                  count(distinct transaction_reference) as transaction_reference_count,
                                  string_agg(distinct settlement_channel, "/" order by settlement_channel) as settlement_channel,
                                  sum(settlement_amount) as settlement_amount
                                  from delivery_notes_settlement_cte
                                  group by 1
                                  ),
------------------------- Report ----------------------------
sales_reconciliation_report as (
                                select distinct dt.creation_date as delivery_trip_creation_date,
                                dt.country_code,
                                rm.division,
                                rm.region,
                                rm.new_territory_id as territory_id,
                                dn.route_id,
                                dn.route_name,
                                dn.fullfilment_center_id,
                                /*case when fc.name = "Khetia " then 'Khetia' 
                                     when fc.name = 'Kapa Oil Mahitaji FC' then 'Kapa Oil Mahitaji FC'
                                else rm.new_territory_id  end as fullfilment_center_name,*/

                                case 
                                    when fc.name in ('Eastlands', 'Majengo Mombasa', 'Kisumu1') then rm.new_territory_id
                                else fc.name end as fullfilment_center_name,

                                dt.driver_code,
                                dt.driver_name,
                                dn.market_developer_name,
                                dn.outlet_id,
                                dn.outlet_name,
                                dn.outlet_phone_number,

                                dt.vehicle_id,
                                --dt.vehicle_v2_id,
                                safe_cast(coalesce(v.load_capacity, dt.vehicle_v2_load_capacity, 'UNSET') as float64) as vehicle_load_capacity,
                                coalesce(v.type, dt.vehicle_v2_type, 'UNSET') as vehicle_type,
                                dt.vehicle_provider_id,
                                --dt.vehicle_v2_service_provider_id,
                                coalesce(v.license_plate,dt.vehicle_v2_license_plate) as vehicle_license_plate,
                                --vsp.name as vehicle_service_provider_name,
                                --v2vsp.name as vehicle_v2_service_provider_name,
                                --coalesce(v3vsp.name,v2vsp.name, vsp.name) as vehicle_service_provider_name,
                                ddc.service_provider_name as vehicle_service_provider_name,

                                dt.id as delivery_trip_id,
                                dt.code as delivery_trip_code,
                                dt.status as delivery_trip_status,
                                --dn.delivery_note_created_at_index,
                                --dn.created_at as delivery_note_creation_datetime,
                                --dt.delivery_note_id,
                                dn.delivery_date as dn_delivery_date,
  								              dn.id as delivery_note_id,
                                dn.code as delivery_note_code,
                                dn.status as delivery_note_status,
                                dn.so_created_on_app as created_on_app,
                                dn.payment_type,

                                dnii.delivery_note_item_index,
                                dnii.product_bundle_id,
                                dnii.item_status,
                                dnii.item_group_id,
                                dnii.uom,
                                dnii.conversion_factor,
                                dnii.stock_item_id,
                                dnii.stock_uom,
                                dnii.inventory_item_qty,
                                
                                dnii.delivery_note_ordered_amount,
                                dnii.delivery_note_dispatched_amount,
                                dnii.delivery_note_removed_amount,
                                dnii.delivery_note_reduced_amount,
                                dnii.delivery_note_returned_amount,
                                dnii.delivery_note_rescheduled_amount,
                                dnii.delivery_note_cancelled_amount,
                                dnii.delivery_note_discount_amount,
                                dnii.gmv_vat_incl,
                                dnii.gmv_vat_incl / (1 + extracted_tax_value) as gmv_vat_excl,
                                --dnii.gmv_vat_excl,
                                case
                                  when dnii.delivery_note_item_index = 1 then dnsa.settlement_amount
                                else 0 end as delivery_note_settlement_amount,
                                dnsa.settlement_channel,
                                i.weight_uom,
                                i.weight_per_unit,
                                (i.weight_per_unit * dnii.conversion_factor * dnii.delivery_note_dispatched_qty) as delivery_note_dispatched_weight,
                                dnii.delivery_note_ordered_qty,
                                dnii.delivery_note_dispatched_qty,
                                dnii.delivery_note_reduced_qty,
                                dnii.delivery_note_delivered_qty,

                                dt.time_since_dispatched,

                                eeu.user_id,
                                eeu.territory_list,
                                from delivery_trips_cte dt
                                left join regional_mapping rm on dt.territory_id = rm.original_territory_id
                                left join delivery_notes_cte dn on dt.id = dn.delivery_trip_id --and dt.delivery_note_id = dn.id
                                left join delivery_notes_inventory_items dnii on dn.id = dnii.id
                                left join delivery_notes_settlement_agg dnsa on dn.id = dnsa.id
                                left join item_cte i on dnii.stock_item_id = i.item_code and dnii.stock_uom = i.stock_uom
                                left join driver_data_cte ddc on dt.driver_id = ddc.id
                                --left join service_provider_cte vsp on dt.vehicle_provider_id = vsp.id
                                --left join service_provider_cte v2vsp on dt.vehicle_v2_service_provider_id = v2vsp.id
                                left join vehicle_cte v on dt.vehicle_id = v.id
                                left join service_provider_cte v3vsp on v.service_provider_id = v3vsp.id
                                left join fulfillment_center_cte fc on dn.fullfilment_center_id = fc.id
                                left join erp_employee_users eeu on dt.territory_id = eeu.territory_list
                                )
select *,
/*case when sum(delivery_note_returned_amount) + sum(delivery_note_reduced_amount) = sum(delivery_note_dispatched_amount) then "HEALTHY TRIP"
else "FLAGGED TRIP" end as trip_reconciliation_status*/
from sales_reconciliation_report
where delivery_trip_status = 'DISPATCHED'
--and user_id = 'cleophas.owino@kyosk.app'
--and delivery_trip_code = 'DT-LZRA-JRW9'
--and delivery_note_code = 'DN-LZRA-0MT4M05XM6FTW'
--order by time_since_dispatched desc 

and FORMAT_DATE('%Y%m%d', delivery_trip_creation_date) between @DS_START_DATE and @DS_END_DATE
and REGEXP_CONTAINS(user_id, @DS_USER_EMAIL)
--group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60
